/****************************************************************************************************/
/*                                                                                                  */
/* Application  : This application is intended to provide secure box for putting up your stuff.     */
/*                The basic idea behind this app is to split the file in multiple chuncks and       */
/*                encrypt each chunk with a key derived from the key of the previous.               */
/* Module       : KeyMutator                                                                        */
/* Description  : This module manipulates the key in irriversible way.                              */
/*                i.e. given mutated key and seed, original key could not be derived                */
/* Input        :   1) key                                                                          */
/*                  2) seed : number that controls the mutation.(in case of decryption)             */
/*                  3) num : total number of keys to make                                           */
/* Output       : mutated key                                                                       */
/* Date         : 3 October 2014                                                                    */
/* Author       : Pratik Patil                                                                      */
/* License      :                                                                                   */
/*               Secure Storeage Box Version 1.0.0                                                  */
/*               Copyright (C) 2017  Pratik Patil                                                   */
/*                                                                                                  */
/*               This program is free software: you can redistribute it and/or modify               */
/*               it under the terms of the GNU General Public License Version 3 as published by     */
/*               the Free Software Foundation.                                                      */
/*                                                                                                  */
/*               This program is distributed in the hope that it will be useful,                    */
/*               but WITHOUT ANY WARRANTY; without even the implied warranty of                     */
/*               MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      */
/*               GNU General Public License for more details.                                       */
/*                                                                                                  */
/*               You should have received a copy of the GNU General Public License                  */
/*               along with this program.  If not, see <http://www.gnu.org/licenses/>.              */
/****************************************************************************************************/

#ifndef KEY_MUTATOR_H
#define KEY_MUTATOR_H
#include <map>
#include <stack>
#include "cryptopp_wrapper/cryptopp_wrapper.h" // byte

namespace SSB
{
///
/// \brief This class accepts the key given by user and mutate it to generate n keys used to encrypt n chunks.
///
/// Target of this module is to make N keys from users password. The prime condition while doing this is that for 
/// each password, set of keys should not be duplicate. The limitation of this module is that the first key generated
/// from the password will always be same but the subsequent keys generated will differ. This is necessary so that 
/// the decryption chain can be started just by knowing password used for encryption.
///
/// Mutation of the key is done by using a random number, this random number has to be  preserved for decryption.
/// It provides method to generate n <random number, this_key> pair.
/// Also a method to generate next_key from <random number, this_key> pair is provided
/// 
/// 
/// \todo Complete implementaion is to be done
  class KeyMutator
  {

  public:

    ///
    /// \brief This will do nothing but create an empty object. keys has to be generated by explicitly calling init_key_container
    ///
    /// key_size is to be specified in bytes. i.e in multiple of sizeof(byte)
    KeyMutator (size_t /*key_size*/);
    ///
    /// \brief This will initialize object. Will make use of init_key_container.
    ///
    KeyMutator (const std::string&, const int num, size_t /*key_size*/);
    ///
    /// \brief This is a copy constructor provided
    ///
    //KEY_MUTATOR( const KEY_MUTATOR& );
    ///
    /// \brief This method returns the keyset populated from the. I think this will be a bad to give away all keys at once. rethink.
    ///

//try
    //std::map<int,KEY> getKeySet() const;
    std::stack<KEY>
    getKeySet () const;
//\\try  
    ///
    /// \brief This method is useful to generate key from the password. parameterised Constructor will use this method. Other classes
    /// also can use this method, especially in case of decryption.
    ///
    KEY
    makeKey (const std::string& /*passwd*/);

    ///
    /// \brief This method will return the next key and seed pair from the map for encryption purpose.
    ///
    /// As encryption in SSB starts from the last block of the file, it will need the last key of the set and then key befor that and so on..
    /// Thus, this method will traverse the _key_container from the end towards the beginig.
    ///
    //const std::map<int/*random seed*/,KEY /*key*/>::iterator next();
//try
    KEY
    next ();
// \try
    ///
    /// \brief This Overload will clear the contener, set number of the keys to be created and use its private counter part.
    ///
    void
    initKeyContainer (const std::string& /*passwd*/, int num/* total_keys*/);
    ///
    /// \brief This method will accept key and seed for mutation. Result of the method is the mulated key.
    ///
    /// This method will be used by init_key_container while encrypting the data to generate whole list of keys.
    /// When decrypting a file, this method will be used by external methods such as split of the ssb_file class.
    /// It is placed in public section for allowing access by split method. Other way of doing same is to make split method friend of
    /// the class. But this will grant access to all other private members, which is not desired.
    KEY
    getNextKey (KEY& /*key*/, int /*seed*/);
  protected:

  private:
    ///
    /// \brief This method will initiaize the _key_containter. using password given, it will generate given num of keys.
    ///
    /// This is the main method of the class.
    void
    initKeyContainer (const std::string& /*passwd*/);
    ///
    /// \brief This method validates the keys
    ///
    bool
    isValidKey (KEY& /*key*/);
    ///
    /// \brief This container hold the information of the key and the seed used for deriving next key.
    /// \todo Check if it can be made a queue
    ///
//try
    //std::map<int/*random seed*/,KEY /*key*/> _key_container;
    std::stack<KEY> _keyContainer;
// \try
    ///
    /// \brief This method will clear _key_container data;
    ///
    bool
    clearContainer ();
    ///
    /// \brief This member keeps the count of keys contained in _key_container. This number will be passed from used.
    ///
    int _size;
    ///
    /// \brief This method returns the number of keys stored in mutator
    ///
    int
    size () const;

    ///
    /// \brief This member keeps the size of the each key to be made.
    ///
    size_t _keySize;

    ///
    /// \brief This member keeps the recored of the keys used till now.
    /// \todo See if need of this variable can be removed.
    int _counter;
    ///
    /// \brief This iterator will give the current seed and key pair
    ///
//try
    //std::map<int/*random seed*/,KEY /*key*/>::iterator _next_key;

//\\ try        
  };
}
#endif
